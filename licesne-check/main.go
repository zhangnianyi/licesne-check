package main

import (
	"encoding/json"
	"fmt"
	"github.com/spf13/viper"
	"gopkg.in/yaml.v2"
	"licesne-check/settings"
	"licesne-check/settings/SendtoWx"
	"log"
	"os"
	"time"
)
type AutoGenerated struct {
	Msgtype string `json:"msgtype"`
	Text struct {
		Content string `json:"content"`
	} `json:"text"`
}
type Config struct {
	App map[string]string `yaml:"app"`
}
type Text struct {
	Content string `json:"content"`
}
func NewAutoGenerated(context string)*AutoGenerated{
	return &AutoGenerated{Msgtype: "text",
		Text: Text{
		Content: context,
		},

	}
}
var License []string
var  List1 =make([]string, 0, 0)

func parseConfig()[]string{
	body, err := os.ReadFile("config.yaml")
	if err != nil{
		log.Fatal("readfile:", err)
	}

	config := &Config{
		App: make(map[string]string),
	}
	err = yaml.Unmarshal(body, config)
	if err != nil{
		log.Fatal("yaml unmarshal:", err)
	}

	apps := []string{}

	for k := range config.App{
		apps = append(apps, k)
	}
	return apps
}


func LicenSeExpireTime(){
	a :=parseConfig()
	for _,v :=range a {
		key1 := fmt.Sprintf("%s.%s", "app", v)
		date := viper.GetString(key1)
		the_time, _ := time.Parse("2006/01/02", date)
		unix_time := the_time.Unix()
		expirttime := (unix_time - time.Now().Unix()) / 86400
		result := fmt.Sprintf("License %s 过期时间还剩: %d天", v, expirttime)
		List1 = append(List1, result)
	}

}
func main() {
	s :=""
	if err := settings.Init(); err != nil {
		fmt.Println("init setting faild err", err)
		return
	}
	LicenSeExpireTime()
	for _,v :=range List1 {
		s += v +"\n" //println(s)
	}
	date :=NewAutoGenerated(s)
	test1,err:=json.Marshal(date)
	if err != nil {
		fmt.Println("json marshal failed")
		return
	}
	//fmt.Println(string(test1))
	SendtoWx.Send(string(test1))

}